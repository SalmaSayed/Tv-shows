function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import cx from 'clsx';
import PropTypes from 'prop-types';
import Drawer from '@material-ui/core/Drawer';
import HeaderMagnet from './HeaderMagnet';
import { useLayoutCtx, useAutoCollapse } from '../hooks';
import { useTransitionStyles, useSidebarStyles } from '../styles';

const Sidebar = (_ref) => {
  let {
    children,
    PaperProps,
    SlideProps
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "PaperProps", "SlideProps"]);

  useAutoCollapse();
  const [entered, setEntered] = React.useState(false);
  const styles = useSidebarStyles();
  const transitionStyles = useTransitionStyles();
  const ctx = useLayoutCtx();
  const {
    sidebar,
    opened,
    setOpened,
    getSidebarWidth
  } = ctx;
  const isPermanent = sidebar.variant === 'permanent';
  return React.createElement(Drawer, _extends({}, props, {
    open: opened,
    onClose: () => {
      setOpened(false);
    },
    variant: sidebar.variant,
    PaperProps: _extends({}, PaperProps, {
      classes: {
        root: cx(styles.paper, isPermanent && transitionStyles.root, entered && transitionStyles.all)
      },
      style: _extends({}, PaperProps.style, {
        width: getSidebarWidth()
      })
    }),
    SlideProps: _extends({}, SlideProps, {
      onEntered: () => setEntered(true),
      onExit: () => setEntered(false)
    })
  }), React.createElement(HeaderMagnet, null), typeof children === 'function' ? children(ctx) : children);
};

Sidebar.propTypes = {
  PaperProps: PropTypes.shape({}),
  SlideProps: PropTypes.shape({}),
  children: PropTypes.oneOfType([PropTypes.func, PropTypes.node])
};
Sidebar.defaultProps = {
  PaperProps: {},
  SlideProps: {},
  children: null
};
export default Sidebar;